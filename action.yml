# https://help.github.com/en/articles/metadata-syntax-for-github-actions
name: 'DockerHub mirror'
description: 'GitHub Action to mirror a DockerHub repo to another registry'
author: 'crazy-max'
branding:
  color: 'green'
  icon: 'copy'

inputs:
  dockerhub-username:
    description: 'DockerHub username'
    required: true
  dockerhub-password:
    description: 'DockerHub password or persona laccess token'
    required: true
  dockerhub-repo:
    description: 'DockerHub repo to mirror'
    required: true
  dest-registry:
    description: 'Destination registry (eg. ghcr.io)'
    required: true
  dest-repo:
    description: 'Destination repo (eg. username/repo)'
    required: true
  dry-run:
    description: 'Dry run'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    -
      run: |
        set -e

        DOCKERHUB_USERNAME=${{ inputs.dockerhub-username }}
        DOCKERHUB_PASSWORD=${{ inputs.dockerhub-password }}
        DOCKERHUB_REPO=${{ inputs.dockerhub-repo }}
        DOCKER_DEST_REGISTRY=${{ inputs.dest-registry }}
        DOCKER_DEST_REPO=${{ inputs.dest-repo }}

        DRYRUN_FLAG="--dry-run"
        if [ "${{ inputs.dry-run }}" = "false" ]; then
          DRYRUN_FLAG=""
        fi

        TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${DOCKERHUB_USERNAME}'", "password": "'${DOCKERHUB_PASSWORD}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
        if [ -z "${TOKEN}" -o "${TOKEN}" == "null" ]; then
          echo >&2 "error: cannot retrieve token"
          exit 1
        fi

        TAG_LIST=$(curl -s -H "Authorization: Bearer ${TOKEN}" "https://hub.docker.com/v2/repositories/${DOCKERHUB_REPO}/tags/?page_size=10000" | jq -rc '.results | reverse | .[] | @base64')
        for TAG in $TAG_LIST; do
          _jq() {
            echo "${TAG}" | base64 --decode | jq -r ${1}
          }
          TAG_NAME=$(_jq '.name')
          echo "::group::Copying ${DOCKERHUB_REPO}:${TAG_NAME} to ${DOCKER_DEST_REGISTRY}/${DOCKER_DEST_REPO}:${TAG_NAME}"
          set -x
          docker buildx imagetools create ${DRYRUN_FLAG} --tag "${DOCKER_DEST_REGISTRY}/${DOCKER_DEST_REPO}:${TAG_NAME}" "${DOCKERHUB_REPO}:${TAG_NAME}"
          set +x
          if [ "${{ inputs.dry-run }}" = "false" ]; then
            docker buildx imagetools inspect "${DOCKER_DEST_REGISTRY}/${DOCKER_DEST_REPO}:${TAG_NAME}"
          fi
          echo "::endgroup"
        done
      shell: bash
